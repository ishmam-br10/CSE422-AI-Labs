# -*- coding: utf-8 -*-
"""Lab 2 mock.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/147vHVvxtta2_1fQc8lWoF_PE7ijzWOJO
"""
import random
#@title Fitness Calculator
def price_calculation(chromosome_set, history, capita):
  history_data = history
  # chromosome1, chromosome2, chromosome3, chromosome4 = chromosome_set
  # chromosome theke jinis gula nibo
  stop_loss = chromosome_set[0]
  take_profit = chromosome_set[1]
  trade_size = chromosome_set[2]
  capita = capita
  # capita ke update kora lagbe oita ekta var e rakhbo
  updated_capita = capita
  for i in history_data:
    # koto tuku taka trade korbo
    trade_money = updated_capita * (trade_size / 100)
    # print(trade_money)
    goccha = 0
    # amader i ki stop losss er theke beshi  na kom?
    if i < (stop_loss * -1):
      # tahole ami cap koira dibo loss
      goccha = trade_money * (- stop_loss / 100 )
      updated_capita = updated_capita + goccha
      # print("hit stop loss")
      # print("updated capita: ", updated_capita)

    # ebar dekhi je lav er ki hal !
    elif i > take_profit:
      goccha = trade_money * (take_profit / 100)
      updated_capita = updated_capita + goccha
      # print("hit take profit")
      # print("updated capita: ", updated_capita)

    else:
      goccha = trade_money * (i / 100)
      updated_capita = updated_capita + goccha
      # print("updated capita: ", updated_capita)

  fitness = updated_capita - capita
  print("fitness: ", fitness)

  return fitness


## =================== Testing =================== ##
historical_prediction = [-1.2, 3.4, -0.8, 2.1, -2.5, 1.7, -0.3, 5.8, -1.1, 3.5]
population = [2, 5, 20]
price_calculation(population, historical_prediction, 1000)
## =================== Testing =================== ##

def genetic_algorithm(all_chromosomes, capita, generations, history_pred):
  # iteration
  generation = generations
  chromosome_dictionary = {}
  for i in range (0, len(all_chromosomes)):
    chromosome_string = "chromosome" + str(i+1)
    chromosome_dictionary[chromosome_string] = all_chromosomes[i]

  fitness_dictionary = {}
  # initial 4 ta chromosome er fitness ber korbo
  fitness_dictionary["chromosome1"] = price_calculation(all_chromosomes[0], history_pred, capita)
  fitness_dictionary["chromosome2"] = price_calculation(all_chromosomes[1], history_pred, capita)
  fitness_dictionary["chromosome3"] = price_calculation(all_chromosomes[2], history_pred, capita)
  fitness_dictionary["chromosome4"] = price_calculation(all_chromosomes[3], history_pred, capita)
  print(fitness_dictionary)

  # fitness dictionary ke sort korbo
  fitness_dictionary = dict(sorted(fitness_dictionary.items(), key=lambda item: item[1], reverse=True))
  print(fitness_dictionary)

  # parent select korlam 2 ta
  def selection(fitness_dict):
    selected_chromosomes = []
    for i in range(2):
      selected_chromosomes.append(fitness_dict.popitem())
    print(selected_chromosomes)
    return selected_chromosomes
  
  def crossover(parents):
    parent1, parent2 = parents
    # parent1 er 1st half + parent2 er 2nd half
    child1 = parent1[0][:2] + parent2[0][2:]
    # parent2 er 1st half + parent1 er 2nd half
    child2 = parent2[0][:2] + parent1[0][2:]
    return child1, child2
  
  def mutation(child):
    mutated_child = child.copy()
    random_index = random.randint(0, 2)
    random_number = random.randint(1, 99)
    mutated_child[random_index] = random_number
    return mutated_child
  for i in range(generation):
    pass




### =================== input =================== ###
# capita = int(input("Enter initial capital: "))
# historical_prediction = []

# # taking input for historical prediction
# print("Enter historical prediction one by one: ")

# for i in range(10):
#   historical_prediction.append(float(input("Enter historical prediction: ")))
# print("Historical prediction: ", historical_prediction)
# initial_population = []

# ## taking input for initial population
# print("Enter initial population one by one: ")
# for i in range (4):
#   chromosome = []
#   stop_loss = float(input("Enter stop loss: "))
#   take_profit = float(input("Enter take profit: "))
#   trade_size = float(input("Enter trade size: "))
#   chromosome.append(stop_loss)
#   chromosome.append(take_profit)
#   chromosome.append(trade_size)
#   initial_population.append(chromosome)
# print("Initial population: ", initial_population)

# generations = int(input("Enter number of generations: "))
### =================== input =================== ###

## =================== Testing  case =================== ##
historical_prediction = [-1.2, 3.4, -0.8, 2.1, -2.5, 1.7, -0.3, 5.8, -1.1, 3.5]
initial_capita = 1000
initial_population = [[2, 5, 20], [3, 7, 30], [1.5, 4, 25], [2.5, 6, 15]]
generations = 10
## =================== Testing  case =================== ##
genetic_algorithm(initial_population, initial_capita, generations, historical_prediction)